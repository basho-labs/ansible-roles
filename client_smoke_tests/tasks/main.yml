---
- name: ensure git is present
  package: "name={{ item }} state=present"
  with_items:
  - git
  - make

- name: Ensure lib directory exists
  file: "path={{ ct_libs_base_path }} state=directory mode=0755"

- name: Ensure each lib directory exists
  file: "path='{{ item.path }}' state=directory mode=0755"
  with_items: '{{ ct_libs }}'
  when:
    - item is defined
    - item.client in ct_test_libs

- name: fetch release info
  uri: "url='https://api.github.com/repos/basho/riak-{{ item.client }}-client/releases/latest?access_token={{ ct_github_token }}' return_content=yes"
  register: "release_data"
  with_items: '{{ ct_libs }}'
  when:
    - item is defined
    - item.client in ct_test_libs

- name: fetch client archives
  git: "repo=https://github.com/basho/riak-{{ item.item.client }}-client.git dest={{ item.item.path }} version={{ item.item.release | default(item.json.tag_name) }} accept_hostkey=true recursive=true"
  with_items: '{{ release_data.results }}'
  when:
    - item is defined
    - not item | skipped
    - not item | failed

- name: fetch Riak client library dependencies
  command: "{{ item.deps }} chdir='{{ item.path }}'"
  with_items: '{{ ct_libs }}'
  environment:
    GOPATH: '{{ golang_gopath }}'
    PATH: '{{ ansible_env.PATH }}:/usr/local/bin'
  when:
    - item is defined
    - item.client in ct_test_libs
    - item.deps

- name: execute Riak client library integration tests
  command: "{{ item[ct_cmd] }} chdir='{{ item.path }}'"
  with_items: '{{ ct_libs }}'
  environment:
    GOPATH: '{{ golang_gopath }}'
    RIAK_HOST: '{{ ct_riak_host }}'
    RIAK_PORT: '{{ ct_riak_port }}'
    RIAK_HTTP_PORT: '{{ ct_riak_http_port }}'
    PATH: '{{ ansible_env.PATH }}:/usr/local/bin'
  register: test_results
  ignore_errors: true
  when:
    - item is defined
    - item.client in ct_test_libs

#- name: output debug data
#  debug: var=test_results

- name: make sure the local output log directory exists
  local_action: "file path={{ ct_test_log_dir }} state=directory mode=0755"
  when:
    - ct_local_log_pull == true

- name: make sure the output log directory exists
  file: "path={{ ct_test_log_dir }} state=directory mode=0755"
  when:
    - ct_local_log_pull == false

- name: locally output test log if error
  local_action: "copy content={{ item.stdout }} dest={{ ct_test_log_dir }}{{ item.item.client }}_{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}.log"
  with_items: '{{ test_results.results }}'
  when:
    - ct_local_log_pull == true
    - item | failed
    - item.stdout is defined

- name: output test log if error
  copy: "content={{ item.stdout }} dest={{ ct_test_log_dir }}{{ item.item.client }}_{{ ansible_date_time.date }}_{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}.log"
  with_items: '{{ test_results.results }}'
  when:
    - ct_local_log_pull == false
    - item | failed
    - item.stdout is defined

- name: fail if any of the smoke tests failed
  fail: "msg='Smoke tests failed. Results logged to {{ ct_test_log_dir }}'"
  when:
    - ct_suppress_failure == false
    - test_results | failed
